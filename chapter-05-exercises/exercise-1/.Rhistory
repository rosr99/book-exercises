paste("This", "Sucks")
round(5/7, 2)
smallest_number <- min(1, 6/8, 4/3)
print(smallest_number)
pasted_result <- paste("This", "Sucks")
print(pasted_result)
pasted_result <- paste("This", "Sucks")
print(pasted_result)
round(5/7, 2)
smallest_number <- min(1, 6/8, 4/3)
print(smallest_number)
min_is_big <- smallest_number > 1 #false
phi <- .5 + sqrt(5)/2 # 1.618...
print(min(1.5, sqrt(3))) # prints 1.5
pasted_result <- paste("This", "Sucks")
print(pasted_result)
round(5/7, 2)
smallest_number <- min(1, 6/8, 4/3)
print(smallest_number)
min_is_big <- smallest_number > 1 #false
phi <- .5 + sqrt(5)/2 # 1.618...
print(phi)
print(min(1.5, sqrt(3))) # prints 1.5
pasted_result <- paste("This", "Sucks")
print(pasted_result)
round(5/7, 2)
smallest_number <- min(1, 6/8, 4/3)
print(smallest_number)
min_is_big <- smallest_number > 1 #false
print(min_is_big)
phi <- .5 + sqrt(5)/2 # 1.618...
print(phi)
print(min(1.5, sqrt(3))) # prints 1.5
my_name <- "Ryan Ros"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
print(name_length)
now_doing <- paste("Ryan Ros", "is programming!")
# Make the `now_doing` variable upper case
now_doing <- toupper(now_doing)
print(now_doing)
fav_1 <- 7
fav_2 <- 21
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1/sqrt(201)
fav_2 <- fav_2/sqrt(201)
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw_sum <- fav_1 + fav_2
raw_sum <- sum(fav_1,fav_2)
print(raw_sum)
round_sum <- round(raw_sum)
print(round_sum)
round_1 <- round(fav_1, digits = 0)
round_2 <- round(fav_2, digits = 0)
round_1 <- round(fav_1, digits = 1)
round_2 <- round(fav_2, digits = 1)
sum_round <- sum(round_1,round_2)
max(round_sum,sum_round)
round_sum <- round(raw_sum)
print(round_sum)
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
round_1 <- round(fav_1, digits = 2)
round_2 <- round(fav_2, digits = 2)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- sum(round_1,round_2)
intro <- substr(lyric, 1, 13)
print(intro)
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
print(intro)
fruits <- substr(lyric, 15, last)
print(fruits)
fruits <- substr(lyric, 15)
print(fruits)
fruits <- substr(lyric, 15,10000)
print(fruits)
fruits_e <- gsub("a", "ee", fruits)
print(fruits_e)
fruits_o <- gsub("a", "o", fruits)
print(fruits_o)
fruits <- substr(lyric, 15,10000) # substr(x,start,stop) substring
print(fruits)
lyric_e <- paste(intro,fruits_e)
print(lyric_e)
print(intro,fruits_o)
print(paste(intro,fruits_o))
add_three <- function(input){
result3 <- input + 3
return(result3)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
print(ten)
imperial_to_metric <- function(feet,inches){
feetToInches <- feet * 12
totalInches <- inches + feetToInches
inchesToMeters <- inches * 0.0254
return(inchesToMeters)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,9)
print(height_in_meters)
print(height_in_meters)
print(height_in_meters)
inchesToMeters <- inches / 39.37007874 #how many inches per meter
print(height_in_meters)
imperial_to_metric <- function(feet,inches){
feetToInches <- feet * 12
totalInches <- inches + feetToInches
inchesToMeters <- inches / 39.37007874 #how many inches per meter
return(inchesToMeters)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,9)
print(height_in_meters)
print(height_in_meters)
imperial_to_metric <- function(feet,inches){
feetToInches <- feet * 12
totalInches <- inches + feetToInches
inchesToMeters <- inches / 39.37007874 #how many inches per meter
return(totalInches)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,9)
print(height_in_meters)
print(height_in_meters)
imperial_to_metric <- function(feet,inches){
feetToInches <- feet * 12
totalInches <- inches + feetToInches
inchesToMeters <- inches / 39.37007874 #how many inches per meter
return(inchesToMeters)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,9)
print(height_in_meters)
inchesToMeters <- inches/39.37007874 #how many inches per meter
print(height_in_meters)
imperial_to_metric <- function(feet,inches){
feetToInches <- feet * 12
totalInches <- inches + feetToInches
inchesToMeters <- inches/39.37007874 #how many inches per meter
return(inchesToMeters)
}
height_in_meters <- imperial_to_metric(5,9)
imperial_to_metric <- function(feet,inches){
feetToInches <- feet * 12
totalInches <- inches + feetToInches
inchesToMeters <- inches/39.37007874 #how many inches per meter
return(totalInches)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,9)
print(height_in_meters)
print(height_in_meters)
imperial_to_metric <- function(feet,inches){
feetToInches <- feet * 12
totalInches <- inches + feetToInches
inchesToMeters <- inches * 0.0254 #how many inches per meter
return(inchesToMeters)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,9)
print(height_in_meters)
imperial_to_metric <- function(feet,inches){
feetToInches <- feet * 12
totalInches <- inches + feetToInches
inchesToMeters <- inches * 0.0254 #how many inches per meter
return(inchesToMeters)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,9)
print(height_in_meters)
print(inchesToMeters)
height_in_meters <- imperial_to_metric(5,9)
imperial_to_metric <- function(feet,inches){
feetToInches <- feet * 12
totalInches <- inches + feetToInches
inchesToMeters <- inches * 0.0254 #how many inches per meter
print(inchesToMeters)
return(inchesToMeters)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,9)
height_in_meters <- imperial_to_metric(5,9)
height_in_meters <- imperial_to_metric(5,9)
imperial_to_metric <- function(feet,inches){
feetToInches <- feet * 12
totalInches <- inches + feetToInches
inchesToMeters <- totalInches * 0.0254 #how many inches per meter
return(inchesToMeters)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,9)
print(height_in_meters)
names <- c(Chris,Tim)
print(names)
source('C:/Users/Ryan/Desktop/book-exercises/chapter-07-exercises/exercise-1/exercise.R', echo=TRUE)
names <- c("Chris","Tim")
print(names)
n <- c(10:49)
print(n)
numberOfElements <- length(n)
print(numberOfElements)
n <- n + 1
print(n)
m <- c(10:1)
print(m)
print(m)
m <- c(seq(10,1,by=2))
print(m)
m <- c(seq(10,1, by = 2))
m <- c(seq(10,1, by = 4))
m <- c(seq(10,1, 4))
m <- c(seq(10,1, 2))
print(m)
m <- c(seq(10,1, 3))
print(m)
print(m)
m <- c(seq(10,1))
print(m)
names <- c("Chris","Tim")
print(names)
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- c(10:49)
print(n)
# Use the `length()` function to get the number of elements in `n`
numberOfElements <- length(n)
print(numberOfElements)
# Add 1 to each element in `n` and print the result
n <- n + 1
print(n)
n <- n - m
print(n)
x_range <- seq(-5,10,by=0.1)
print(x_range)
sin_wave <- sin(x_range)
print(sin_wave)
cos_wave <- cos(x_range)
print(cos_wave)
wave <- c((sin_wave * cos_wave) + sin_wave)
print(wave)
plot(wave)
first_ten <- c(10:20)
print(first_ten)
next_ten <- c(seq(21,30))
print(next_ten)
all_numbers <- next_ten + first_ten
print(all_numbers)
all_numbers <- sum(first_ten,next_ten)
print(all_numbers)
eleventh <- substr(all_numbers,11,11)
print(eleventh)
first_ten <- c(10:20)
print(first_ten)
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- c(seq(21,30))
print(next_ten)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- sum(first_ten,next_ten)
print(all_numbers)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- substr(all_numbers,11,11)
print(eleventh)
all_numbers <- c(sum(first_ten,next_ten))
print(all_numbers)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- substr(all_numbers,11,11)
print(eleventh)
all_numbers <- c(sum(first_ten,next_ten))
print(all_numbers)
first_ten <- c(10:20)
print(first_ten)
next_ten <- c(seq(21,30))
print(next_ten)
all_numbers <- c(sum(first_ten,next_ten))
print(all_numbers)
all_numbers <- c(first_ten + next_ten)
print(all_numbers)
eleventh <- substr(all_numbers,11,11)
print(eleventh)
all_numbers <- c(first_ten + next_ten)
print(all_numbers)
eleventh <- substr(all_numbers,11,11)
print(eleventh)
eleventh <- all_numbers[11]
print(eleventh)
print(all_numbers)
some_numbers <- all_numbers[2:5]
print(some_numbers)
even <- c(1:100)%2
even <- c(1:100)%%2
even <- c(1:100)%%2
print(even)
even <- c(seq(1,100,by=2))
print(even)
even <- c(seq(1,100,2))
print(even)
even <- c(seq(1,100,2))
odd <- seq(1,by=2, len=100)
print(even)
print(odd)
print(even)
even <- c(seq(0,100,2))
print(even)
even <- c(seq(1,100,2)+1)
print(even)
isEven <- all(even,"%%",2)
print(isEven)
isEven <- all(even %% 2 == 0)
print(isEven)
phone_numbers <- c(8,6,7,5,3,0,9)
print(phone_numbers)
prefix <- phone_numbers[1:3]
print(prefix)
small <- phone_numbers <= 5
print(small)
small <- phone_numbers[phone_numbers <= 5 & !is.nan(phone_numbers)]
print(small)
large <- phone_numbers[phone_numbers > 5 & !is.nan(phone_numbers)]
print(large)
phone_numbers <- gsub(phone_numbers>5,5,phone_numbers)
print(phone_numbers)
phone_numbers <- phone_numbers[phone_numbers > 5 ] = 5
print(phone_numbers)
print(phone_numbers)
phone_numbers <- phone_numbers[phone_numbers > 5 ] = 5
print(phone_numbers)
phone_numbers <- replace(phone_numbers, phone_numbers > 5, 5)
print(phone_numbers)
phone_numbers <- replace(phone_numbers, (phone_numbers %% 2) != 0, 0)
print(phone_numbers)
phone_numbers <- replace(phone_numbers, phone_numbers %% != 0, 0)
phone_numbers <- replace(phone_numbers, phone_numbers %% 2 != 0, 0)
print(phone_numbers)
phone_numbers <- replace(phone_numbers, phone_numbers %% 2 == 0, 0)
print(phone_numbers)
phone_numbers[phone_numbers %% 2 != 0] <- 0
print(phone_numbers)
phone_numbers <- c(8,6,7,5,3,0,9)
print(phone_numbers)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
print(prefix)
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers <= 5 & !is.nan(phone_numbers)]
print(small)
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers[phone_numbers > 5 & !is.nan(phone_numbers)]
print(large)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers <- replace(phone_numbers, phone_numbers > 5, 5)
print(phone_numbers)
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers %% 2 != 0] <- 0
print(phone_numbers)
earthquakes <- c(6.8, 5.3, 5.0, 7.3, 7.1, 6.3, 5.5)
# filter for earthquakes that were larger than 6.5
earthquakes[earthquakes > 6.5]
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
# Access the last element in the list and return a vector
shark_length[-4]
# Confirm that you returned a vector and not a list
is.list(shark_length)
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
# Access the last element in the list and return a vector
shark_length[4]
# Confirm that you returned a vector and not a list
is.list(shark_length)
c(shark_length[-4])
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
# Access the last element in the list and return a vector
c(shark_length[-4])
# Confirm that you returned a vector and not a list
is.list(shark_length)
as.vector(shark_length[-4])
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
# Access the last element in the list and return a vector
as.vector(shark_length[-4])
is.list(shark_length)
as.vector(shark_length[4])
is.list(shark_length)
c(shark_length[4])
is.list(shark_length)
shark_length <- c(shark_length[4])
is.list(shark_length)
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
# Access the last element in the list and return a vector
shark_length <- c(shark_length[4])
# Confirm that you returned a vector and not a list
is.list(shark_length)
shark_length <- c(shark_length[4])
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
# Access the last element in the list and return a vector
shark_length <- c(shark_length[4])
# Confirm that you returned a vector and not a list
is.list(shark_length)
shark_length <- shark_length[4]
is.list(shark_length)
shark_length[4]
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
# Access the last element in the list and return a vector
shark_length[4]
# Confirm that you returned a vector and not a list
is.list(shark_length)
shark_length <- c(shark_length[4])
is.list(shark_length)
shark_length[4]
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
# Access the last element in the list and return a vector
shark_length[[4]]
is.list(shark_length)
is.list(shark_length[[4]])
is.list(shark_length[4])
shark_length[4]
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
# Access the last element in the list and return a vector
shark_length[4]
# Confirm that you returned a vector and not a list
is.list(shark_length[[4]])
lab_grades[["is_participant"]] <- "Yes"
lab_grades <- list(hwk_scores = 5:10,
student_year = c(1, 4, 4, 2, 3, 2),
lab = "LL")
# Add a new item is_participant = "Yes" to the list lab_grades
lab_grades[["is_participant"]] <- "Yes"
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) - ((tea + 2*scone) * discount)
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) - ((tea + 2*scone) * discount)
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- (total_with_discount) + (total_with_discount * sales_tax)
print(total_after_tax)
